#![allow(unused_imports)]
#![allow(unused_variables)]

use codec::{Decode, Encode};
use rstd::{convert::TryInto, prelude::*, result};
use sr_primitives::traits::{CheckedDiv, CheckedSub, Hash};
use support::{
    decl_event, decl_module, decl_storage, dispatch::Result, ensure, traits::Currency, StorageMap, StorageValue,
};

use log;
use rstd::convert::Into;
use system::ensure_signed;


pub trait Trait: system::Trait {
    /// The overarching event type.
    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;
}


#[cfg_attr(feature = "std", derive(Debug))]
#[derive(Encode, Decode, Clone, PartialEq, Eq, Default)]
pub struct ZXInfo<TAccountId> {
    pub owner: TAccountId,
    pub data1: u64,
    pub data2: u64,
    pub data3: u64,
    pub data4: u64
}

decl_event!(
    pub enum Event<T>
    where
        AccountId = <T as system::Trait>::AccountId,
    {
        /// Deposit a new parking lot
        ItemAdded(AccountId, u64, u64, u64, u64),
    }
);

decl_storage! {
    trait Store for Module<T: Trait> as ZXModule {
        Items: map T::AccountId => ZXInfo<T::AccountId>;
    }
}

decl_module! {
    /// The module declaration.
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        // Initializing events
        // this is needed only if you are using events in your module
        fn deposit_event() = default;

        /// Create a new parking lot
        pub fn new(origin, data1: u64, data2: u64, data3: u64, data4: u64) -> Result {
            let owner = ensure_signed(origin)?;

            let one_zx = ZXInfo {
                owner: owner.clone(),
                data1,
                data2,
                data3,
                data4
            };

            <Items<T>>::insert(owner.clone(), one_zx);

            Self::deposit_event(RawEvent::ItemAdded(owner.clone(), data1, data2, data3, data4));
            Ok(())
        }

    }
}

/// tests for this module
#[cfg(test)]
mod tests {
    use super::*;

    use primitives::{Blake2Hasher, H256};
    use runtime_io::{with_externalities, TestExternalities};
    use sr_primitives::weights::Weight;
    use sr_primitives::Perbill;
    use sr_primitives::{
        testing::Header,
        traits::{BlakeTwo256, IdentityLookup},
    };
    use support::{assert_err, assert_ok, impl_outer_origin, parameter_types};

    impl_outer_origin! {
        pub enum Origin for Test {}
    }

    // For testing the module, we construct most of a mock runtime. This means
    // first constructing a configuration type (`Test`) which `impl`s each of the
    // configuration traits of modules we want to use.
    #[derive(Clone, Eq, PartialEq)]
    pub struct Test;

    parameter_types! {
        pub const BlockHashCount: u64 = 250;
        pub const MaximumBlockWeight: Weight = 1024;
        pub const MaximumBlockLength: u32 = 2 * 1024;
        pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);
    }

    impl system::Trait for Test {
        type Origin = Origin;
        type Call = ();
        type Index = u64;
        type BlockNumber = u64;
        type Hash = H256;
        type Hashing = BlakeTwo256;
        type AccountId = u64;
        type Lookup = IdentityLookup<Self::AccountId>;
        type Header = Header;
        type WeightMultiplierUpdate = ();
        type Event = ();
        type BlockHashCount = BlockHashCount;
        type MaximumBlockWeight = MaximumBlockWeight;
        type MaximumBlockLength = MaximumBlockLength;
        type AvailableBlockRatio = AvailableBlockRatio;
        type Version = ();
    }

    parameter_types! {
        pub const ExistentialDeposit: u64 = 0;
        pub const TransferFee: u64 = 0;
        pub const CreationFee: u64 = 0;
        pub const TransactionBaseFee: u64 = 0;
        pub const TransactionByteFee: u64 = 0;
    }

    impl balances::Trait for Test {
        type Balance = u64;
        type OnFreeBalanceZero = ();
        type OnNewAccount = ();
        type Event = ();
        type TransactionPayment = ();
        type TransferPayment = ();
        type DustRemoval = ();
        type ExistentialDeposit = ExistentialDeposit;
        type TransferFee = TransferFee;
        type CreationFee = CreationFee;
        type TransactionBaseFee = TransactionBaseFee;
        type TransactionByteFee = TransactionByteFee;
        type WeightToFee = ();
    }

    parameter_types! {
        pub const MinimumPeriod: u64 = 1000;
    }

    impl timestamp::Trait for Test {
        type Moment = u64;
        type OnTimestampSet = ();
        type MinimumPeriod = MinimumPeriod;
    }

    impl Trait for Test {
        type Event = ();
        type Currency = balances::Module<Test>;
    }

    type Parking = Module<Test>;

    // This function basically just builds a genesis storage key/value store according to
    // our desired mockup.
    fn new_test_ext() -> TestExternalities<Blake2Hasher> {
        let mut t = system::GenesisConfig::default().build_storage::<Test>().unwrap();
        GenesisConfig::<Test>::default().assimilate_storage(&mut t).unwrap();
        // or
        // t.0.extend(GenesisConfig::<Test>::default().build_storage().unwrap().0);

        GenesisConfig::<Test> {
            parking_lots: vec![(0, 10, 10, 10, 10, 100, 60, 60), (1, 100, 1, 100, 100, 100, 61, 61)],
        }
        .assimilate_storage(&mut t)
        .unwrap();
        t.into()
    }

    #[test]
    fn test_new_parking_lot() {
        with_externalities(&mut new_test_ext(), || {
            let user = 0;
            assert_eq!(Parking::all_parking_lots_count(), 2);
            assert_ok!(Parking::new_parking_lot(Origin::signed(user), 50, 50, 100, 50, 100,));
            assert_eq!(Parking::all_parking_lots_count(), 3);
            assert_eq!(Parking::owner_parking_lots_count(user), 2);
            assert_eq!(Parking::owner_parking_lots_count(1), 1);
        })
    }

    #[test]
    fn test_entering_and_leving() {
        with_externalities(&mut new_test_ext(), || {
            let user = 1;
            assert_eq!(Parking::all_parking_lots_count(), 2);

            let parking_lot_hash = Parking::owner_parking_lots_array((0, 0));
            assert_eq!(Parking::parking_lots_by_index(0), parking_lot_hash);
            assert_ok!(Parking::entering(Origin::signed(user), parking_lot_hash.clone()));

            let parking_info = Parking::user_parking_info(user).unwrap();
            assert_eq!(parking_info.user_id, user);
            assert_eq!(parking_info.current_fee, 0);
            assert_eq!(parking_info.current_time.clone(), parking_info.enter_time.clone());
            assert_err!(
                Parking::entering(Origin::signed(user), parking_lot_hash.clone()),
                "User already has entered a parking lot"
            );
            assert_ok!(Parking::leaving(Origin::signed(user)));

            assert_ok!(Parking::entering(Origin::signed(user), parking_lot_hash.clone()));
            let parking_info = Parking::user_parking_info(user).unwrap();
            assert_eq!(parking_info.user_id, user);
            assert_eq!(parking_info.current_fee, 0);
            assert_eq!(parking_info.current_time.clone(), parking_info.enter_time.clone());
            assert_err!(
                Parking::entering(Origin::signed(user), parking_lot_hash.clone()),
                "User already has entered a parking lot"
            );
            assert_ok!(Parking::leaving(Origin::signed(user)));
        })
    }

    #[test]
    fn test_leving() {
        with_externalities(&mut new_test_ext(), || {
            let user = 0;
            assert_err!(
                Parking::leaving(Origin::signed(user)),
                "User has not entered a parking lot"
            );
        })
    }
}
